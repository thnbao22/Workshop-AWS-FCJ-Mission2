[
{
	"uri": "/vi/1-introductiontoterraform/",
	"title": "Giới thiệu về Terraform",
	"tags": [],
	"description": "",
	"content": "\nTổng quan Terraform là gì? Terraform là một công cụ Cơ sở hạ tầng dưới dạng Code mà để cho bạn xây dựng, thay đỔi và tạo thay đổi phiên bản hạ tầng một cách an toàn và hiệu quả.\nĐiều này bao gồm các thành phần cấp thấp như máy ảo, lưu trữ và mạng máy tính; và các thành phần cấp cao các DNS entries và tính năng SaaS.\nTerraform hoạt động như thế nào? Terraform tạo và quản lý tài nguyên trên nền tảng đám mây và các dịch vụ khác thông qua giao diện lập trình ứng của họ (APIs). Providers cho phép Terraform hoạt động với hầu như mọi nền tảng hoặc dịch vụ với API có thể truy cập được.\nQuy trình làm việc cốt lõi của Terraform bao gồm ba giai đoạn:\nWrite: Bạn xác định các tài nguyên có thể có trên nhiều nhà cung cấp và dịch vụ đám mây. Plan: Terraform tạo một kế hoạch thực hiện mô tả cơ sở hạ tầng mà nó sẽ tạo, cập nhật hoặc hủy dựa trên cơ sở hạ tầng hiện có và cấu hình của bạn. Apply: Sau khi được phê duyệt, Terraform thực hiện các hoạt động được đề xuất theo đúng thứ tự, tôn trọng mọi sự phụ thuộc vào tài nguyên. Nội dung Terraform Cơ bản Terraform CLI Cài đặt "
},
{
	"uri": "/vi/2-defineinfrastructure/2.1networking/",
	"title": "Mạng",
	"tags": [],
	"description": "",
	"content": "\nOverview Về Mạng, chúng tôi có một số thành phần như VPC (đám mây riêng ảo), Mạng con, Cổng Internet và Bảng định tuyến (và cũng có Nhóm bảo mật).\nChúng ta cần tạo một VPC trước khi có thể tạo các mạng con công cộng, bảng định tuyến, nhóm bảo mật và cổng kết nối mạng.\nĐám mây ảo riêng tư Dựa trên kiến trúc ở trên, chúng tôi biết rằng mình cần tạo VPC có CIDR 10.10.0.0/16 ở khu vực Singapore, nơi có 2 Mạng con công khai với CIDR 10.10.1.0/24 và 10.10.2.0/24. Mạng con công khai 1 tại ap-southeast-1a và mạng còn lại tại ap-southeast-1b.\nCổng kết nối mạng Mục đích của Cổng kết nối mạng là cho phép máy chủ ảo trong mạng con công khai giao tiếp với Internet.\nBảng định tuyến Bảng định tuyến sẽ liên kết với 2 mạng con công khai, điều này sẽ giúp các máy chủ ảo trong 2 mạng con công khai có thể giao tiếp với Internet\nNhóm bảo mật Chúng ta cần tạo Nhóm bảo mật cho EC2, với các quy tắc gửi đến cho phép kết nối ALB và SSH từ máy cục bộ của chúng ta. Ngoài ra, nhóm bảo mật cho ALB cho phép lưu lượng truy cập từ internet.\nTiếp theo, chúng ta sẽ tiếp tục với mô-đun điện toán\n"
},
{
	"uri": "/vi/3-infrastructureascode/3.1networking/",
	"title": "Mạng",
	"tags": [],
	"description": "",
	"content": "Tổng quan Chúng ta sẽ xây dựng cơ sở hạ tầng dựa trên kiến trúc này. Một VPC có 2 mạng con công khai. Cổng kết nối Internet được gắn vào VPC. Bảng định tuyến giúp định tuyến EC2 trong Mạng con công khai để liên lạc với internet.\nCài đặt các tập tin Trong thư mục Networking, tạo ba tập tin và đặt tên chúng tương ứng là main.tf, variables.tf và outputs.tf.\nĐầu tiên, chúng ta sẽ xác định Availability Zones mà chúng ta sử dụng trong tệp variables.tf.\nMặc định chúng ta chỉ sử dụng 2 AZ là ap-southeast-1a và ap-southeast-1b. Xác định biến đầu vào cho VPC CIDR\nvariable \u0026#34;availabitity_zones\u0026#34; {\rdescription = \u0026#34;AZs in this region to use\u0026#34;\rdefault = [\u0026#34;ap-southeast-1a\u0026#34;, \u0026#34;ap-southeast-1b\u0026#34;]\r}\rvariable \u0026#34;cidr_block\u0026#34; {\r} Trong tệp tin main.tf, chúng ta chỉ cần tạo một số tài nguyên như VPC, Mạng con công khai, Bảng định tuyến, Nhóm bảo mật và Cổng Internet.\nVPC Chúng tôi sẽ sử dụng tài nguyên aws_vpc để cung cấp tài nguyên VPC. Bạn có thể đọc thêm về tài nguyên này tại đây.\nresource \u0026#34;aws_vpc\u0026#34; \u0026#34;one-tier-vpc\u0026#34; {\rcidr_block = var.cidr_block\renable_dns_hostnames = true\renable_dns_support = true\rtags = {\rName = \u0026#34;vpc-workshop-2\u0026#34;\r}\r} 2 Mạng con công khai Về mạng con, chúng ta sử dụng tài nguyên aws_subnet để tạo 2 mạng con công cộng có CIDR 10.10.1.0/24 và 10.10.2.0/24.\nresource \u0026#34;aws_subnet\u0026#34; \u0026#34;public_subnet_1\u0026#34; {\rvpc_id = aws_vpc.one-tier-vpc.id\ravailability_zone = var.availabitity_zones[0]\rcidr_block = \u0026#34;10.10.1.0/24\u0026#34;\rmap_public_ip_on_launch = true\rtags = {\r\u0026#34;Name\u0026#34; = \u0026#34;Public Subnet 1\u0026#34;\r}\r}\rresource \u0026#34;aws_subnet\u0026#34; \u0026#34;public_subnet_2\u0026#34; {\rvpc_id = aws_vpc.one-tier-vpc.id\ravailability_zone = var.availabitity_zones[1]\rcidr_block = \u0026#34;10.10.2.0/24\u0026#34;\rmap_public_ip_on_launch = true\rtags = {\r\u0026#34;Name\u0026#34; = \u0026#34;Public Subnet 2\u0026#34;\r}\r} Cổng kết nối Internet Sử dụng tài nguyên aws_internet_gateway để đính kèm cổng kết nối Internet vào VPC.\nresource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;one_tier_igw\u0026#34; {\rvpc_id = aws_vpc.one-tier-vpc.id\rtags = {\r\u0026#34;Name\u0026#34; = \u0026#34;Workshop2 IGW\u0026#34;\r}\r} Bảng định tuyến công khai Chúng ta dùng tài nguyên aws_route_table để tạo một bảng định tuyến công khai. Chúng tôi tạo một mục trong bảng định tuyến bằng cách sử dụng aws_route, cái mà dùng để định tuyến lưu lượng truy cập bên trong Mạng con công khai tới internet thông qua Cổng Internet.\nCuối cùng, chúng ta cần liên kết bảng định tuyến công khai với 2 mạng con công khai bằng cách sử dụng tài nguyên aws_route_table_association\nresource \u0026#34;aws_route_table\u0026#34; \u0026#34;public_rt\u0026#34; {\rvpc_id = aws_vpc.one-tier-vpc.id\rtags = {\r\u0026#34;Name\u0026#34; = \u0026#34;Public Route Table\u0026#34;\r}\r}\rresource \u0026#34;aws_route\u0026#34; \u0026#34;public_route\u0026#34; {\rroute_table_id = aws_route_table.public_rt.id\rdestination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34;\rgateway_id = aws_internet_gateway.one_tier_igw.id\r}\rresource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;one_tier_rt_public_associate_1\u0026#34; {\rroute_table_id = aws_route_table.public_rt.id\rsubnet_id = aws_subnet.public_subnet_1.id\r}\rresource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;one_tier_rt_public_associate_2\u0026#34; {\rroute_table_id = aws_route_table.public_rt.id\rsubnet_id = aws_subnet.public_subnet_2.id\r} Nhóm bảo mật công khai Nguồn dữ liệu này sẽ giúp chúng ta truy xuất địa chỉ IP cục bộ của máy.\nBạn có thể đọc thêm về điều này tại đây.\ndata \u0026#34;http\u0026#34; \u0026#34;local_ip\u0026#34; {\rurl = \u0026#34;https://ipv4.icanhazip.com\u0026#34;\r} Chúng ta sẽ xác định 2 quy tắc gửi đến cho Nhóm bảo mật.\nQuy tắc đầu tiên là cho phép SSH từ máy cục bộ của bạn. Bằng cách sử dụng nguồn dữ liệu, bạn có thể truy xuất địa chỉ IPv4 của máy cục bộ của mình.. Quy tắc thứ hai là cho phép HTTP từ Cân bằng tải ứng dụng sử dụng cổng 80. resource \u0026#34;aws_security_group\u0026#34; \u0026#34;one_tier_public_sg\u0026#34; {\rname = \u0026#34;Public Security Group\u0026#34;\rdescription = \u0026#34;Allow HTTP and SSH inbound traffic\u0026#34;\rvpc_id = aws_vpc.one-tier-vpc.id\ringress {\rfrom_port = 22\rto_port = 22\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [ \u0026#34;${chomp(data.http.local_ip.response_body)}/32\u0026#34; ]\r}\ringress {\rfrom_port = 80\rto_port = 80\rprotocol = \u0026#34;tcp\u0026#34;\rsecurity_groups = [aws_security_group.one_tier_alb_sg.id]\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\rlifecycle {\rcreate_before_destroy = true\r}\r} Nhóm bảo mật ALB Nhóm bảo mật ALB cho phép người dùng đi qua Application Load Balancer từ internet trước khi họ có thể tiếp cận nhóm Auto Scaling Group.\nresource \u0026#34;aws_security_group\u0026#34; \u0026#34;one_tier_alb_sg\u0026#34; {\rname = \u0026#34;ALB Security Group\u0026#34;\rvpc_id = aws_vpc.one-tier-vpc.id\ringress {\rfrom_port = 80\rto_port = 80\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\r} Đầu ra Sau khi xác định tài nguyên, chúng ta cần xuất một số biến để các tài nguyên khác, như Điện toán, sử dụng. Chúng ta sẽ làm điều đó trong tập tin outputs.tf.\noutput \u0026#34;vpc_id\u0026#34; {\rvalue = aws_vpc.one-tier-vpc.id\r}\routput \u0026#34;public_subnet_1_id\u0026#34; {\rvalue = aws_subnet.public_subnet_1.id\r}\routput \u0026#34;public_subnet_2_id\u0026#34; {\rvalue = aws_subnet.public_subnet_2.id\r}\routput \u0026#34;public_sg_id\u0026#34; {\rvalue = aws_security_group.one_tier_public_sg.id\r}\routput \u0026#34;alb_sg_id\u0026#34; {\rvalue = aws_security_group.one_tier_alb_sg.id\r} Bạn có thể thấy rằng chúng ta xuất ra một số tài nguyên như ID của VPC, 2 Mạng con công khai, SG công cộng và ALB SG.\nVì vậy, hãy chuyển sang thư mục Điện toán.\n"
},
{
	"uri": "/vi/",
	"title": "Sử dụng Terraform để cung cấp cơ sở hạ tầng trên Đám mây AWS",
	"tags": [],
	"description": "",
	"content": "Sử dụng Terraform để cung cấp cơ sở hạ tầng trên Đám mây AWS Tổng quan Trong bài lab này, chúng ta sẽ học cách tiển khai một kiến trúc có độ sẵn sàng cao trên AWS sử dụng Terraform, một công cụ Cơ sở hạ tầng dưới dạng code nổi tiếng.\nKiến trúc Trong kiến trúc này, bạn có thể thấy chúng ta có một VPC với CIDR là 10.10.0.0/16, có 2 Subnet công cộng với CIDR lần lượt là 10.10.1.0/24 và 10.10.2.0/24. Thêm vào đó, VPC còn có một Cổng kết nối Internet được đính kèm vào nó.\nTrước khi chúng ta bước vào quá trình triển khai của kiến trúc của chúng ta, hãy dành một chút thời gian để hiểu các khái niệm của Auto Scaling Group, Application Load Balancer và Amazon SNS để tìm hiểu về vai trò của chúng trong việc đảm bảo độ sẵn sàng và khả năng mở rộng của ứng dụng của ta.\nChúng ta chỉ dùng thao tác tay để tạo Amazon Simple Notification Service (Amazon SNS) trên AWS Management Console hoặc AWS CLI sau khi triển khai kiến trúc sử dụng công cụ Cơ sở hạ tầng dưới dạng Code.\nApplication Load Balancer là gì? Elastic Load Balancing tự động phân phối lưu lượng truy cập đến qua nhiều mục tiêu, các máy ảo EC2, container, và địa chỉ IP, trong một hoặc nhiều Availability Zone.\nNó theo dõi sức khỏe của các mục tiêu đã đăng ký, và chỉ điều hướng lưu lượng truy cập đến các mục tiêu khỏe mạnh.\nElastic Load Balancing mở rộng quy mô bộ cân bằng tải của bạn khi lưu lượng truy cập đến thay đổi theo thời gian.\nElastic Load Balancing hỗ trợ các loại cân bằng tải:\nApplication Load Balancers Network Load Balancers Gateway Load Balancers Classic Load Balancers Chúng ta sẽ tìm hiểu về Application Load Balancer.\nCác thành phần của Application Load Balancer Một Bộ cân bằng tải hoạt động như điển liên lạc duy nhất với khách hàng. Bộ cân bằng tải phân phối lưu lượng truy cập ứng dụng đến từ nhiều mục tiêu, như các máy ảo EC2, trong nhiều AZ. Điều này tăng khả năng sẵn có của ứng dụng bạn.\nMột listener kiểm tra yêu cầu kết nối từ khách hàng, sử dụng giao thức và cổng mà bạn cấu hình.\nMỗi target group điều hướng yêu cầu đến một hoặc nhiều mục tiêu đã đăng ký, như các máy ảo EC2, sử dụng giao thức và số cổng mà bạn chỉ định.\nAuto Scaling Group là gì? Amazon EC2 Auto Scaling giúp bạn đảm bảo rằng bạn có được chính xác số lượng máy ảo EC2 có sẵn để xử lý tải cho ứng dụng của mình.\nBạn tạo một nhóm các máy ảo EC2, gọi là Auto Scaling Groups.\nVới Auto Scaling Groups, bạn có thể chỉ định số lượng tối đa/tối thiểu các máy ảo tromg mỗi Auto Scaling Groups, và Amazon EC2 Auto Scaling đảm bảo rằng các nhóm máy chủ ảo của bạn sẽ không bao giờ vượt quá/ít hơn kích thước này.\nCác lợi ích của Auto Scaling Việc thêm Amazon EC2 Auto Scaling vào kiến trúc ứng dụng của bạn là một cách để tối đa hoá lợi ích của đám mây AWS .\nKhả năng chịu lỗi: Amazon EC2 Auto Scaling có thể phát hiện khi một máy ảo không hoạt động tốt, tắt nó, và khởi chạy một máy chủ ảo mới để thay thế.\nKhả năng sẵn có: Amazon EC2 Auto Scaling giúp đảm bảo rằng ứng dụng của bạn luôn luôn có đủ khả năng xử lý để đáp ứng nhu cầu lưu lượng truy cập hiện tại.\nQuản lý chi phí: Amazon EC2 Auto Scaling có thể tăng hoặc giảm khả năng xử lý một cách linh hoạt theo nhu cầu. Bởi vì bạn chỉ trả tiền cho các thể hiện EC2 mà bạn sử dụng, bạn tiết kiệm tiền bằng cách khởi chạy thể hiện khi cần thiết và tắt chúng khi không cần thiết.\nVậy bạn có thể thấy việc tích hợp Auto Scaling group của bạn với một bộ cân bằng tải Elastic Load Balancing giúp bạn có thể thiết lập một ứng dụng cân bằng tải.\n-\u0026gt; It will help increase the scalability and availability of your application.\nAmazon Simple Notification Service Amazon Simple Notification Service (Amazon SNS) is a managed service that provides message delivery from publishers to subscribers (also known as producers and consumers).\nVới Amazon SNS, bạn có thể cấu hình Auto Scaling Group của bạn để thông báo các sự kiện quan trọng mà ảnh hưởng tới ứng dụng của bạn.\nVí dụ, nếu bạn cấu hình Auto Scaling group của bạn sử dụng loại thông báo autoscaling:EC2_INSTANCE_LAUNCH, và Auto Scaling group của bạn khởi chạy một máy ảo, điều đó sẽ gửi một thông báo email.\nSNS Notifications Amazon EC2 Auto Scaling hỗ trợ gửi các thông báo Amazon SNS khi mà các sự kiện dưới đây xảy ra.\nEvents Description autoscaling:EC2_INSTANCE_LAUNCH Khởi chạy máy ảo thành công autoscaling:EC2_INSTANCE_LAUNCH_ERROR Khởi chạy máy ảo thất bại autoscaling:EC2_INSTANCE_TERMINATE Chấm dứt máy ảo thành công autoscaling:EC2_INSTANCE_TERMINATE_ERROR Chấm dứt máy ảo thất bại Tin nhắn bao gồm các thông tin như sau:\nEvent — Sự kiện.\nAccountId — account ID của tài khoản AWS.\nAutoScalingGroupName — Tên của Auto Scaling Group.\nAutoScalingGroupARN — ARN (Amazon Resource Name) của Auto Scaling group.\nEC2InstanceId — ID của máy ảo EC2.\nNội dung Giới thiệu về Terraform Định nghĩa kiến trúc Cơ sở hạ tầng dưới dạng Code Triển khai cơ sở hạ tầng và cấu hình SNS Kết luận Xoá tài nguyên "
},
{
	"uri": "/vi/4.deployinfraandconfiguresns/4.1networkingresources/",
	"title": "Tài nguyên mạng",
	"tags": [],
	"description": "",
	"content": "Tổng quan Bây giờ, chúng ta sẽ xem xét các tài nguyên của chúng tôi. Truy cập giao diện VPC và xem một số tài nguyên như VPC, Mạng con công cộng, Cổng Internet và Nhóm bảo mật của chúng ta.\nĐám mây ảo riêng tư VPC with CIDR 10.10.0.0/16 2 Mạng con công cộng Mạng con công cộng 1 với CIDR 10.10.1.0/24 Mạng con công cộng 2 với CIDR 10.10.2.0/24 Bảng định tuyến công cộng Liên kết mạng con Cổng kết nối internet Cổng kết nối internet được gắn vào VPC. Nhóm bảo mật công cộng 2 luật inbound:\nCho phép SSH từ địa chỉ IP cục bộ Cho phép HTTP từ Nhóm bảo mật ALB Nhóm bảo mật ALB 1 luật inbound:\nCho phép yêu cầu HTTP từ internet Bây giờ, hãy chuyển sang xem tài nguyên Điện toán của chúng ta.\n"
},
{
	"uri": "/vi/1-introductiontoterraform/1.1-terraformfundamentals/",
	"title": "Terraform cơ bản",
	"tags": [],
	"description": "",
	"content": "Terraform đơn giản Cấu trúc thư mục Giá trị local Các biến đầu vào Các giá trị đầu ra Nhà cung cấp Các tài nguyên Nguồn dữ liệu Quản lý trạng thái Tài liệu Terraform Cấu trúc thư mục Một thư mục điển hình chứa các file main.tf, outputs.tf, providers.tf, and variables.tf, nơi mà\nmain.tf chứa các tài nguyên cốt lõi của mô-dun outputs.tf (không bắt buộc) chứa các giá trị đầu ra của mô-đun variables.tf (không bắt buộc) chứa các biến nhập vào của mô-đun providers.tf (không bắt buộc) chứa cấu hình nhà cung cấp sẽ được đề cập sau này Ví dụ: bố cục terraform chính\nterraform-test\r├── main.tf\r├── outputs.tf\r├── providers.tf\r└── variables.tf Các giá trị Local Giá trị cục bộ là các giá trị được đặt tên được chỉ định và có thể được sử dụng trong toàn bộ mã của bạn. Giá trị cục bộ có thể là giá trị không đổi hoặc được tham chiếu. Các giá trị cục bộ được chỉ định bằng cách tạo một tập hợp khối cục bộ như minh họa bên dưới:\nlocals {\r# Assign the value of \u0026#39;dev\u0026#39; to environment\rinstance_name = \u0026#34;dev-instance\u0026#34;\r# Obtain the instance ID of the \u0026#39;app_server\u0026#39; EC2 instance\rinstance_id = aws_instance.app_server.id\r} Để dùng các biến local, định dạng là local.\u0026lt;variable_name\u0026gt;. Sau đây là ví dụ về cách sử dụng biến local để đặt tên cho tài nguyên máy ảo EC2.\nresource \u0026#34;aws_instance\u0026#34; \u0026#34;this_server\u0026#34; {\r# ...\rtags = {\r# Using local variable\rName = local.instance_name,\r\u0026#34;Environment\u0026#34; = \u0026#34;dev\u0026#34;\r}\r} Các biến đầu vào Input variables are used to provide parameters for you to customize your Terraform module without altering the module\u0026rsquo;s source code and prevent hard-coding values and enabled you to re-use code An example of input variables:\nvariable \u0026#34;app_name\u0026#34; {\rtype = string\rdescription = \u0026#34;Name of the application\u0026#34;\rdefault = \u0026#34;\u0026#34;\r} To use input variables, the format is var.\u0026lt;variable_name\u0026gt;. Here is an example of using the input variable to name the EC2 instance resource:\nresource \u0026#34;aws_instance\u0026#34; \u0026#34;app_server\u0026#34; {\r# ...\rtags = {\r# Using input variable\rName = var.app_name,\r\u0026#34;Environment\u0026#34; = \u0026#34;prod\u0026#34;\r}\r} You can also assign variables using the command line: terraform apply -var=\u0026quot;app_name=wordpress-app\u0026quot;\nCác biến đầu ra Biến đầu ra cho phép bạn hiển thị thông tin về tài nguyên để các cấu hình Terraform khác có thể sử dụng thông tin đó.\nMột ví dụ của các biến đầu ra:\noutput \u0026#34;instance_tags\u0026#34; {\rvalue = aws_instance.this_server.tags\rdescription = \u0026#34;A mapping of EC2 instance tags\u0026#34;\r} Nhà cung cấp Nhà cung cấp cung cấp sự tương tác với các nhà cung cấp đám mây, nhà cung cấp Phần mềm dưới dạng dịch vụ (SaaS) và Giao diện lập trình ứng dụng (API) khác. Mỗi nhà cung cấp cung cấp một bộ tài nguyên và nguồn dữ liệu mà Terraform có thể quản lý. Ví dụ về AWS provider:\nterraform {\rrequired_providers {\raws = {\rsource = \u0026#34;hashicorp/aws\u0026#34;\rversion = \u0026#34;5.47.0\u0026#34;\r}\r}\r}\rprovider \u0026#34;aws\u0026#34; {\r# Configuration options\r} Các tài nguyên Tài nguyên là yếu tố cốt lõi trong Terraform. Việc khai báo một tài nguyên có thể xác định một hoặc nhiều cơ sở hạ tầng các đối tượng tài nguyên chẳng hạn như điện toán, kết nối mạng, v.v.\nVí dụ về một tài nguyên S3 bucket trong AWS Simple Storage Service (S3):\nresource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;example\u0026#34; {\rbucket = \u0026#34;workshop2-bucket\u0026#34;\r} Nguồn dữ liệu Nguồn dữ liệu cho phép tra cứu các tài nguyên được xác định bên ngoài Terraform và cung cấp các thuộc tính có trong tài nguyên đó\nVí dụ về tra cứu nguồn dữ liệu của một AWS Virtual Private Cloud (VPC) hiện có:\ndata \u0026#34;aws_vpc\u0026#34; \u0026#34;selected\u0026#34; {\rid = \u0026#34;vpc-00f0b02721857a89d\u0026#34;\r} "
},
{
	"uri": "/vi/2-defineinfrastructure/2.2compute/",
	"title": "Điện toán",
	"tags": [],
	"description": "",
	"content": "\nOverview Chúng ta có một nhóm Auto Scaling Group mà có thể tăng hoặc giảm số lượng máy chủ ảo trong mạng con công khai.\nMáy chủ ảo EC2 trong nhóm Auto Scaling sẽ tự động chạy một scrip để cài đặt Apache Web Server.\nChúng ta cũng tạo Chính sách theo dõi mục tiêu với loại chính sách là Tỷ lệ theo dõi mục tiêu, loại số liệu là Mức sử dụng CPU trung bình và Giá trị mục tiêu là 50.\n-\u0026gt; Chính sách này được đặt thành mục tiêu mở rộng theo dõi với giá trị mục tiêu là mức sử dụng CPU là 50%.\nNó đảm bảo rằng Nhóm Auto Scaling duy trì mức sử dụng CPU mong muốn bằng cách tăng hoặc giảm số lượng máy ảo tương ứng.\n"
},
{
	"uri": "/vi/3-infrastructureascode/3.2compute/",
	"title": "Điện toán",
	"tags": [],
	"description": "",
	"content": "Overview Về Tính toán, chúng ta có Nhóm Auto Scaling. Trước khi có thể khởi chạy Nhóm Auto Scaling, chúng ta cần xác định mẫu khởi chạy của mình\nCài đặt các tập tin Trong thư mục Compute, tạo bốn tệp tin và đặt tên chúng lần lượt là main.tf, variables.tf, outputs.tf và install_apache_and_stress.sh.\nĐầu tiên, hãy xác định một số biến mà chúng ta sẽ sử dụng trong tệp variables.tf.\nvariable \u0026#34;instance_type\u0026#34; {\r}\rvariable \u0026#34;image_id\u0026#34; {\r}\rvariable \u0026#34;keypair_name\u0026#34; {\r}\rvariable \u0026#34;web_server_sg_id\u0026#34; {\r}\rvariable \u0026#34;public_subnet_1_id\u0026#34; {\r}\rvariable \u0026#34;public_subnet_2_id\u0026#34; {\r}\rvariable \u0026#34;alb_tg_arn\u0026#34; {\r} Mẫu khởi chạy Mẫu khởi chạy cũng chạy tập lệnh để tự động cài đặt Apache Web Server và stress. Chúng ta sẽ cài đặt các lệnh để cài đặt Apache Web Server và stress trong tập tin install_apache_and_stress.sh\nstress là một công cụ mạnh mẽ đơn giản được thiết kế để áp đặt số lượng CPU, bộ nhớ, I/O hoặc ổ đĩa có thể định cấu hình trên hệ thống Linux. Công cụ này có giá trị trong việc xác định các điểm yếu tiềm ẩn và đảm bảo rằng hệ thống có thể xử lý các tác vụ đòi hỏi khắt khe mà không ảnh hưởng đến hiệu suất.\n#!/bin/bash\rsudo yum update -y\rsudo yum install -y httpd.x86_64\rsudo systemctl start httpd.service\rsudo systemctl enable httpd.service\recho \u0026#34;Hello First Cloud Journey Program from $(hostname -f)\u0026#34; \u0026gt; /var/www/html/index.html\rsudo amazon-linux-extras install epel -y\rsudo yum install stress -y Trong tập tin main.tf, sử dụng tài nguyên aws_launch_template để tạo ra một khởi chạy cho nhóm Auto Scaling.\nresource \u0026#34;aws_launch_template\u0026#34; \u0026#34;one_tier_web_server\u0026#34; {\rname = \u0026#34;Launch-Template-Web-Server\u0026#34;\rinstance_type = var.instance_type\rimage_id = var.image_id\rvpc_security_group_ids = [ var.web_server_sg_id ]\rkey_name = var.keypair_name\ruser_data = filebase64(\u0026#34;${path.module}/install_apache_and_stress.sh\u0026#34;)\rtags = {\r\u0026#34;Name\u0026#34; = \u0026#34;Web Server Launch Template\u0026#34;\r}\r} Nhóm Auto Scaling Chúng ta có thể tạo Nhóm Auto Scaling sau khi xác định mẫu khởi chạy của mình.\nTrong tập tin main.tf, sử dụng tài nguyên aws_autoscaling_group để tạo một nhóm Auto Scaling Group.\nỞ đây, chúng ta xác định kích thước tối thiểu của Nhóm Auto Scaling là 2 và kích thước tối đa là 4, đại diện cho số lượng máy ảo EC2 trong Nhóm Auto Scaling.\nChúng ta khởi chạy Nhóm Auto Scaling trên 2 mạng con công khai nên chúng ta sử dụng vpc_zone_identifier để xác định ID mạng con để khởi chạy tài nguyên.\nresource \u0026#34;aws_autoscaling_group\u0026#34; \u0026#34;one_tier_web_server\u0026#34; {\rname = \u0026#34;ASG-Web-Server\u0026#34;\rmin_size = 2\rmax_size = 4\rdesired_capacity = 2 vpc_zone_identifier = [ var.public_subnet_1_id, var.public_subnet_2_id ]\rtarget_group_arns = [ var.alb_tg_arn ]\rhealth_check_grace_period = 300\rhealth_check_type = \u0026#34;ELB\u0026#34;\rlifecycle {\rcreate_before_destroy = true\r}\rlaunch_template {\rid = aws_launch_template.one_tier_web_server.id\rversion = \u0026#34;$Latest\u0026#34;\r}\r} Chính sách theo dõi mục tiêu Ngoài ra, chúng ta cũng cần tạo Chính sách theo dõi mục tiêu để kiểm tra xem mức sử dụng CPU có trên 50 hay không thì Auto Scaling Group sẽ tự động mở rộng quy mô máy chủ ảo EC2 của chúng ta. Chúng ta có thể sử dụng tài nguyên aws_autoscaling_policy để thực hiện hành động này.\nresource \u0026#34;aws_autoscaling_policy\u0026#34; \u0026#34;average_cpu_policy_greater\u0026#34; {\rname = \u0026#34;CPUAveragePolicyGreater\u0026#34;\rpolicy_type = \u0026#34;TargetTrackingScaling\u0026#34;\rautoscaling_group_name = aws_autoscaling_group.one_tier_web_server.name\r# If the CPU Utilization is above 50\rtarget_tracking_configuration {\rpredefined_metric_specification {\rpredefined_metric_type = \u0026#34;ASGAverageCPUUtilization\u0026#34;\r}\rtarget_value = 50.0\r}\r} Đầu ra Chúng ta chỉ cần xuất tên của Auto Scaling Group trong tệp tin outputs.tf cho các mục đích khác.\noutput \u0026#34;asg_name\u0026#34; {\rvalue = aws_autoscaling_group.one_tier_web_server.name\r} Tiếp theo, chúng ta sẽ tiếp tục với mô-đun cân bằng tải.\n"
},
{
	"uri": "/vi/2-defineinfrastructure/",
	"title": "Định nghĩa kiến trúc",
	"tags": [],
	"description": "",
	"content": "Overview Chúng ta sẽ phân tích kiến trúc của mình thành ba thành phần:\nMạng Cân bằng tải Điện toán. Bằng cách chia kiến trúc thành các thành phần như vậy, việc xây dựng Cơ sở hạ tầng dưới dạng Mã trở nên dễ xác định hơn khi chúng ta biết thành phần nào cần được tạo trước, giúp việc xây dựng chương trình trở nên đơn giản hơn.\nContent Mạng Điện toán Cân bằng tải "
},
{
	"uri": "/vi/4.deployinfraandconfiguresns/4.2computeresources/",
	"title": "Tài nguyên điện toán",
	"tags": [],
	"description": "",
	"content": "Tổng quan Ở đây, chúng ta chỉ xem xét một số tài nguyên như mẫu khởi chạy của chúng ta, Nhóm Auto Scaling và số lượng máy chủ ảo đang chạy. Vui lòng truy cập vào giao diện EC2.\nCác máy chủ ảo EC2 Hai máy chủ ảo EC2 đang chạy cùng lúc vì chúng ta đã xác định số lượng mong muốn là 2 trong Auto Scaling Group, đảm bảo luôn có hai máy chủ ảo EC2 chạy đồng thời.\nMẫu khởi chạy Nhóm Auto Scaling Chính sách mở rộng quy mô động Loại chính sách: Mở rộng theo dõi mục tiêu Loại số liệu: Mức sử dụng CPU trung bình Giá trị mục tiêu: 50 Cuối cùng, chúng ta sẽ xem xét tài nguyên Cân bằng tải và kiểm tra máy chủ web của chúng ta.\n"
},
{
	"uri": "/vi/1-introductiontoterraform/1.2-terraformcli/",
	"title": "Terraform CLI",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Terraform cung cấp giao diện dòng lệnh (CLI) có thể được gọi bằng lệnh terraform sau khi bạn đã cài đặt Terraform vào hệ thống của mình.\nĐể xem danh sách các lệnh có sẵn trong phiên bản Terraform hiện tại của bạn, hãy chạy terraform không có đối số bổ sung:\nUsage: terraform [global options] \u0026lt;subcommand\u0026gt; [args]\rThe available commands for execution are listed below.\rThe primary workflow commands are given first, followed by\rless common or more advanced commands.\rMain commands:\rinit Prepare your working directory for other commands\rvalidate Check whether the configuration is valid\rplan Show changes required by the current configuration\rapply Create or update infrastructure\rdestroy Destroy previously-created infrastructure\rAll other commands:\rconsole Try Terraform expressions at an interactive command prompt\rfmt Reformat your configuration in the standard style\rforce-unlock Release a stuck lock on the current workspace\rget Install or upgrade remote Terraform modules\rgraph Generate a Graphviz graph of the steps in an operation\rimport Associate existing infrastructure with a Terraform resource\rlogin Obtain and save credentials for a remote host\rlogout Remove locally-stored credentials for a remote host\rmetadata Metadata related commands\routput Show output values from your root module\rproviders Show the providers required for this configuration\rrefresh Update the state to match remote systems\rshow Show the current state or a saved plan\rstate Advanced state management\rtaint Mark a resource instance as not fully functional\runtaint Remove the 'tainted' state from a resource instance\rversion Show the current Terraform version\rworkspace Workspace management\rGlobal options (use these before the subcommand, if any):\r-chdir=DIR Switch to a different working directory before executing the\rgiven subcommand.\r-help Show this help output, or the help for a specified subcommand.\r-version An alias for the \u0026quot;version\u0026quot; subcommand.\rCác lệnh chính cho Terraform CLI là:\nSubcommand Description init Initialize your Terraform working directory validate Checks if your configuration is valid plan Show changes that will be made to your current environment apply Create or update your environment destroy Delete the environment that was previously created Terraform init Lệnh terraform init khởi tạo thư mục làm việc Terraform của bạn.\nTerraform validate Lệnh terraform validation chạy các bước kiểm tra để xác minh rằng cấu hình Terraform trong thư mục làm việc có hợp lệ về mặt cú pháp nhưng không xác thực các dịch vụ từ xa như API nhà cung cấp và trạng thái từ xa.\nNó thường được sử dụng để xác thực các mô-đun có thể tái sử dụng và đảm bảo rằng tên thuộc tính và loại giá trị nói chung là chính xác.\nTerraform plan Lệnh `terraform plan tạo và kế hoạch thực thi cung cấp cho bạn bản xem trước về những thay đổi sẽ được thực hiện đối với cơ sở hạ tầng của bạn (tức là tài nguyên nào sẽ được tạo, tài nguyên nào sẽ bị xóa và tài nguyên nào sẽ được sửa đổi).\nTerraform apply Lệnh terraform apply thực thi các hành động được đề xuất từ kế hoạch Terraform. Terraform destroy Lệnh terraform destroy sẽ xóa tất cả tài nguyên từ xa được cấu hình Terraform của thư mục làm việc hiện tại quản lý.\nLưu ý rằng nếu tài nguyên được tạo bên ngoài cấu hình Terraform cụ thể, nó sẽ không bị hủy.\n"
},
{
	"uri": "/vi/1-introductiontoterraform/1.3-setup/",
	"title": "Cài đặt",
	"tags": [],
	"description": "",
	"content": "Các yêu cầu Để thực hiện bài lab này, bạn sẽ cần cài đặt Visual Studio Code, AWS CLI và Terraform trên máy của bạn.\nTài khoản AWS Bạn phải có tài khoản AWS, trong đó có người dùng IAM có quyền Administrative.\nCài đặt Visual Studio Code Sau khi cài đặt Visual Studio Code thành công, bạn có thể tải xuống tiện ích mở rộng cho Terraform có tên HashiCorp Terraform.\nCài đặt Terraform Bạn có thể kiểm tra xem Terraform đã được cài đặt trên máy cục bộ của mình hay chưa bằng cách mở terminal và gõ terraform version\nCài đặt AWS CLI phiên bản 2 Bạn có thể kiểm tra xem AWS CLI đã được cài đặt trên máy cục bộ của mình hay chưa bằng cách mở terminal và nhập aws --version.\nTiếp theo, bạn sẽ cần tạo Access keys. Hãy làm theo các bước dưới đây để tạo Access keys.\nNhấp vào tài khoản AWS của bạn và nó sẽ xuất hiện một tab. Chọn Security credentials. Kéo xuống, bạn sẽ thấy một giao diện Access keys. Nhấn vào Create access key. Trong giao diện Create access key, chọn Third party service. Rồi, tích vào ô vuông. Chọn Next. Nhấn vào Create access key Nhấn vào Download .csv file và Done. Mở file có đuôi .csv. Bạn sẽ thấy file chứa một access key và secret key.\nMở terminal và gõ aws configure. Bạn sẽ thấy một số thứ xuất hiện trong terminal.\nCấu hình như bên dưới: AWS Access Key ID: Gán your access key AWS Secret Access Key : Gán your secret access key Default region name: Nhập ap-southeast-1 Default output format: Nhập json "
},
{
	"uri": "/vi/2-defineinfrastructure/2.3loadbalancing/",
	"title": "Cân bằng tải",
	"tags": [],
	"description": "",
	"content": "\nTổng Quan Mục đích của Cân bằng tải ứng dụng ở đây là định tuyến lưu lượng truy cập mạng đến một nhóm máy ảo EC2 ổn định.\nTrước khi có thể khởi chạy Cân bằng tải ứng dụng, chúng ta cần xác định nhóm mục tiêu của mình. Trong trường hợp này, Cân bằng tải ứng dụng sẽ định tuyến lưu lượng truy cập đến máy ảo EC2 trong Mạng con công cộng, vì vậy chúng ta có thể hiểu rằng các máy ảo EC2 của chúng ta là nhóm mục tiêu.\nNgoài ra, chúng ta cũng cần định cấu hình listenr của mình, đây là quá trình kiểm tra các yêu cầu kết nối, sử dụng giao thức và cổng mà bạn định cấu hình. Bạn phải có ít nhất một listener.\nTại đây, chúng ta sẽ cấu hình nhóm mục tiêu của mình thành Nhóm Auto Scaling và thiết lập Listener để sử dụng giao thức HTTP trên cổng 80.\nSau khi thu thập thông tin về ba thành phần, giờ đây bạn có thể sử dụng Terraform để xây dựng cơ sở hạ tầng.\n"
},
{
	"uri": "/vi/3-infrastructureascode/3.3loadbalancing/",
	"title": "Cân bằng tải",
	"tags": [],
	"description": "",
	"content": "Tổng quan Giới thiệu về Cân bằng tải, Cân bằng tải ứng dụng sẽ định tuyến lưu lượng truy cập đến Nhóm Auto Scaling. Chúng ta sẽ xác định listener và nhóm mục tiêu của mình.\nCài đặt các tập tin Trong thư mục LoadBalancing, tạo ba tệp tin và đặt tên chúng lần lượt là main.tf, variables.tf và outputs.tf.\nXác định một số biến mà chúng ta sẽ sử dụng trong tệp variables.tf.\nvariable \u0026#34;one_tier_vpc_id\u0026#34; {\r}\rvariable \u0026#34;port\u0026#34; {\r}\rvariable \u0026#34;protocol\u0026#34; {\r}\rvariable \u0026#34;alb_security_group_id\u0026#34; {\r}\rvariable \u0026#34;public_subnet_1_id\u0026#34; {\r}\rvariable \u0026#34;public_subnet_2_id\u0026#34; {\r} Nhóm mục tiêu Trước khi có thể tạo Application Load Balancer, chúng ta cần xác định Nhóm mục tiêu. Ở đây chúng tôi sử dụng tài nguyên aws_lb_target_group để tạo một nhóm mục tiêu trong tập tin main.tf.\nresource \u0026#34;aws_lb_target_group\u0026#34; \u0026#34;instance_tg\u0026#34; {\rname = \u0026#34;ASG-Web-Server-Target-Group\u0026#34;\rport = var.port\rprotocol = var.protocol\rvpc_id = var.one_tier_vpc_id\r} Application Load Balancer Tiếp theo, chúng ta sẽ tạo Application Load Balancer bằng cách sử dụng tài nguyên aws_lb và aws_lb_listener\nChúng ta xác định loại cân bằng tải của mình là Application Load Balancer. Đính kèm mạng con công khai 1 và mạng con công khai 2 vào ALB.\nresource \u0026#34;aws_lb\u0026#34; \u0026#34;application_load_balancer\u0026#34; {\rname = \u0026#34;ALB-Web-Server\u0026#34;\rinternal = false\rload_balancer_type = \u0026#34;application\u0026#34;\rsecurity_groups = [ var.alb_security_group_id ]\rsubnets = [ var.public_subnet_1_id, var.public_subnet_2_id ]\r} Listener Chúng ta sử dụng tài nguyên aws_lb_listener để cấu hình listener and định tuyến.\nresource \u0026#34;aws_lb_listener\u0026#34; \u0026#34;application_load_balancer_listener\u0026#34; {\rload_balancer_arn = aws_lb.application_load_balancer.arn\rport = var.port\rprotocol = var.protocol\rdefault_action {\rtype = \u0026#34;forward\u0026#34;\rtarget_group_arn = aws_lb.aws_lb_target_group.instance_tg.arn\r}\r} Output Chúng ta chỉ xuất các giá trị như alb_dns để lấy DNS trong tệp tin output.tf để kiểm tra Nhóm Auto Scaling.\noutput \u0026#34;alb_dns\u0026#34; {\rvalue = aws_lb.application_load_balancer.dns_name\r}\routput \u0026#34;alb_endpoint\u0026#34; {\rvalue = aws_lb.application_load_balancer.dns_name\r}\routput \u0026#34;alb_tg_name\u0026#34; {\rvalue = aws_lb_target_group.instance_tg.name\r}\routput \u0026#34;alb_tg_arn\u0026#34; {\rvalue = aws_lb_target_group.instance_tg.arn\r} Cuối cùng, chúng ta đã hoàn thành việc xây dựng ba thành phần cơ sở hạ tầng bao gồm Mạng, Điện toán và Cân bằng tải. Tiếp theo, chúng tôi sẽ định cấu hình thư mục terraform để có thể bắt đầu triển khai cơ sở hạ tầng.\n"
},
{
	"uri": "/vi/3-infrastructureascode/",
	"title": "Cơ sở hạ tầng dưới dạng mã",
	"tags": [],
	"description": "",
	"content": "\nSau khi hiểu về ba thành phần trong kiến trúc, chúng ta có thể dễ dàng cấu trúc mã nguồn của mình để xây dựng cơ sở hạ tầng.\nTrong bước này, chúng ta sẽ sử dụng Terraform để xây dựng tuần tự các mô-đun như Mạng, Điện toán và Cân bằng tải.\nĐầu tiên chúng ta hãy tạo một thư mục và đặt tên gì tùy thích. Mở terminal và gõ cd để điều hướng đến nơi bạn muốn tạo thư mục. Sử dụng lệnh mkdir để tạo thư mục. Bạn có thể thấy rằng tôi tạo một thư mục và đặt tên là Deploy-Infrastructure. Bạn có thể tạo một thư mục ở bất cứ đâu trên máy tính và đặt tên bất cứ thứ gì bạn muốn. Sau đó, bạn có thể gõ lệnh sau để mở thư mục vừa tạo mà không cần mở Visual Studio Code. code \u0026lt;yourfolder\u0026gt; Trong trường hợp của tôi, nó sẽ như dưới đây. Sau khi bạn chạy lệnh, một tab Visual Studio Code sẽ đột nhiên xuất hiện trên máy tính. Hãy bắt đầu cấu trúc thư mục làm việc của chúng ta. Tạo hai thư mục và đặt tên chúng lần lượt là modules và terraform. Bạn có thể thực hiện việc này bằng cách sử dụng terminal trong Visual Studio Code hoặc chọn Thư mục mới trên Visual Studio Code. Hiện tại, thư mục làm việc của chúng ta trông như thế này.\nDEPLOY-INFRASTRUCTURE\r├── modules\r├── terraform\rTrong thư mục modules, tạo ba thư mục và đặt tên chúng lần lượt là Networking, Compute và LoadBalancing. Chúng ta đã cấu trúc thành công thư mục làm việc của mình. Hãy đi vào từng mô-đun và xây dựng mã nguồn để cung cấp cơ sở hạ tầng. Hiện tại, thư mục làm việc của chúng ta trông như thế này.\nDEPLOY-INFRASTRUCTURE\r├── modules\r| |── Compute\r| |── LoadBalancing\r| |── Networking\r├── terraform\rBây giờ, hãy chuyển sang từng mô-đun để xây dựng cơ sở hạ tầng của chúng ta.\nContent Mạng Điện Toán Bộ cân bằng tải Terraform "
},
{
	"uri": "/vi/4.deployinfraandconfiguresns/4.3loadbalancingresources/",
	"title": "Tài nguyên cân bằng tải",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tại đây, chúng ta đang xem xét một số tài nguyên như Nhóm mục tiêu, Cân bằng tải và máy chủ web của chúng ta bằng trình duyệt web.\nTarget Group Bạn có thể thấy rằng nhóm mục tiêu của chúng ta cũng kiểm tra tình trạng của hai máy chủ ảo EC2.\nBộ cân bằng tải Kiểm tra Web Server bằng trình duyệt Web Bạn có thể kiểm tra máy chủ web bằng cách sử dụng DNS của ALB. Bạn có thể sao chép giá trị trong terminal hoặc bộ cân bằng tải.\nMở trình duyệt web, nhập tên DNS. Bạn sẽ thấy như dưới đây.\nBạn để ý địa chỉ IP hiện ra trên màn hình là 10.10.2.114. Bây giờ hãy nhấn F5 để làm mới trình duyệt web.\nSau khi làm mới trình duyệt web, địa chỉ IP sẽ thay đổi thành 10.10.1.181. Bạn có thể nhận thấy rằng các địa chỉ IP này là địa chỉ IP của hai phiên bản EC2 đang chạy.\nBây giờ, hãy định cấu hình Nhóm tự động mở rộng quy mô của chúng ta với Amazon SNS để chúng ta có thể nhận thông báo khi một phiên bản khởi chạy hoặc kết thúc.\n"
},
{
	"uri": "/vi/4.deployinfraandconfiguresns/4.4configuresnsandasg/",
	"title": "Cấu hình SNS và nhóm Auto Scaling",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Trong phần này, chúng ta sẽ đặt cấu hình thông báo Amazon SNS để thông báo cho bạn bất cứ khi nào nhóm Auto Scaling của bạn khởi chạy hoặc chấm dứt phiên bản. Thực hiện theo các bước sau.\nTruy cập giao diện EC2: Chọn Auto Scaling Groups Chọn ASG Web Server Nhấn vào Activity Nhấn vào Create notification Trong giao diện Create notification: Gửi thông báo tới: Nhập AutoScaling-SNS Với những người nhận này: gõ youremail Nhấn vào Create Truy cập giao diện SNS: Nhấn vào Topics và chọn Topics của bạn (AutoScaling-SNS). Kéo xuống và nhấn vào Create subscription Trong giao diện Create subscription: Protocol: Chọn Email Endpoint: Nhập email của bạn (Đây là email mà bạn muốn SNS gửi thông báo tới) Kéo xuống, Chọn Create subscription Bạn sẽ nhận được email từ AWS trong hộp thư của mình. Nhấn vào email, rồi chọn Confirm subscription. Bạn sẽ thấy một màn hình có nội dung Subscription confirmed. Bây giờ, bạn đã xác nhận thành công đăng ký Amazozn SNS của mình. Bạn có thể kiểm tra trạng thái của các subscription. Bây giờ, hãy SSH vào một trong hai máy ảo EC2. SSH thành công. Chạy lệnh sudo su để chạy với quyền root. Gõ stress để xem stress đã được cài đặt chưa. Bây giờ, gõ stress -c 8. Lệnh stress -c 8 được sử dụng để tạo tải cho hệ thống bằng cách chạy quy trình con. Trong trường hợp này, -c 8 có nghĩa là nó tạo ra 8 quy trình con worker, mỗi quy trình đó tạo ra tải cho CPU. Điều này giúp kiểm tra hiệu suất và độ ổn định của hệ thống trong điều kiện tải CPU cao. Chúng ta cần đợi 5 - 10 phút để nhóm Auto Scaling thu thập các thông số. Khi CPU vượt quá ngưỡng 50%, một máy ảo EC2 mới sẽ được khởi chạy theo chính sách mở rộng quy mô. Truy cập vào giao diện EC2, Chọn Auto Scaling groups. Nhấn vào Nhóm Auto Scaling của chúng ta (ASG Web Server). Bạn sẽ thấy Auto Scaling Group đang chuẩn bị khởi chạy một máy ảo mới. The Auto Scaling Group launch a new instance. Truy cập Gmail và bạn sẽ thấy email được gửi từ AWS. Thông báo chứa một số thông tin sau: Service: AWS Auto Scaling EC2InstanceId: i-04ed494c64679845c Description: Launching a new EC2 instance: i-04ed494c64679845c Event: autoscaling:EC2_INSTANCE_LAUNCH Bây giờ hãy đợi 5 - 10 phút. Nhóm Auto Scaling sẽ khởi chạy một máy ảo mới. Cuối cùng, bạn đã tìm hiểu cách định cấu hình Amazon SNS với Auto Scaling Group để thông báo cho bạn về các sự kiện quan trọng ảnh hưởng đến ứng dụng của bạn.\n"
},
{
	"uri": "/vi/3-infrastructureascode/3.4terraform/",
	"title": "Terraform",
	"tags": [],
	"description": "",
	"content": "\nTổng quan Với thư mục terraform, chúng ta có thể gọi tới một số mô-đun như Mạng, Điện toán và Cân bằng tải. Chúng ta không cần phải điều hướng đến từng thư mục và chạy terraform plan, terraform apply để tạo từng tài nguyên.\nCài đặt các tập tin Trong thư mục terraform, tạo ba tập tin và đặt tên tương ứng là main.tf, outputs.tf và provider.tf.\nThiết lập nhà cung cấp Trong Terraform, nhà cung cấp là một plugin hoạt động như một giao diện giữa Terraform và một dịch vụ hoặc nền tảng bên ngoài. Các nhà cung cấp cho phép Terraform quản lý tài nguyên, tương tác với API và thực hiện các hoạt động trên nhiều nền tảng đám mây, dịch vụ cơ sở hạ tầng và hệ thống của bên thứ ba.\nMột số nhà cung cấp Terraform phổ biến:\nazurerm: Azure aws: Amazon Web Services google: Google Cloud Platform Ở đây ta triển khai trên AWS nên cần cấu hình trong file provider.tf. Chúng ta sẽ tạo ra tài nguyên ở khu vực Singapore.\nterraform {\rrequired_providers {\raws = {\rsource = \u0026#34;hashicorp/aws\u0026#34;\rversion = \u0026#34;5.43.0\u0026#34;\r} }\r}\rprovider \u0026#34;aws\u0026#34; {\rregion = \u0026#34;ap-southeast-1\u0026#34;\r} Thiếp lập các mô-đun Như ta đã nói trước đây, bạn không cần phải đi đến từng mô-đun và chạy terraform plan, terraform apply để tạo từng tài nguyên. Bạn có thể xác định các mô-đun trong tệp main.tf.\n# Define our modules\rmodule \u0026#34;Networking\u0026#34; {\rsource = \u0026#34;../modules/Networking\u0026#34;\rcidr_block = \u0026#34;10.10.0.0/16\u0026#34;\r}\rmodule \u0026#34;Compute\u0026#34; {\rsource = \u0026#34;../modules/Compute\u0026#34;\rinstance_type = \u0026#34;t2.micro\u0026#34;\rimage_id = \u0026#34;ami-04f73ca9a4310089f\u0026#34;\rkeypair_name = \u0026#34;workshop-keypair-2\u0026#34;\rweb_server_sg_id = module.Networking.public_sg_id\rpublic_subnet_1_id = module.Networking.public_subnet_1_id\rpublic_subnet_2_id = module.Networking.public_subnet_2_id\ralb_tg_arn = module.LoadBalancing.alb_tg_arn\r}\rmodule \u0026#34;LoadBalancing\u0026#34; {\rsource = \u0026#34;../modules/LoadBalancing\u0026#34;\rone_tier_vpc_id = module.Networking.vpc_id\rpublic_subnet_1_id = module.Networking.public_subnet_1_id\rpublic_subnet_2_id = module.Networking.public_subnet_2_id\ralb_security_group_id = module.Networking.alb_sg_id\rport = 80\rprotocol = \u0026#34;HTTP\u0026#34;\r} Mô-đun mạng Trong mô-đun Mạng, chúng ta chỉ cần nhập CIDR của VPC là 10.10.0.0/16.\nMô-đun điện toán Ở đây, chúng tôi sử dụng ID hình ảnh của Amazon Linux 2 AMI và loại phiên bản là t2.micro. Bạn có thể lấy những thông tin này từ AMI.\nVề keypair_name, hãy truy cập AWS Management Console và tìm kiếm EC2 (Hãy nhớ thay đổi khu vực của bạn thành Singapore) sau đó nhấp vào Key Pairs.\nNhấn vào Create key pair Cấu hình như bên dưới.\nSau khi tạo key pair thành công, bạn sẽ thấy một thông báo.\nVề web_server_sg_id, public_subnet_1_id, public_subnet_2_id và lb_target_group_name, chúng ta sẽ lấy đầu vào từ module Networking.\nMô đun Cân bằng tải Chúng ta chỉ xác định giao thức HTTTP trên cổng 80. Về one_tier_vpc_id, public_subnet_1_id, public_subnet_2_id và alb_security_group_id, chúng ta cũng sẽ lấy thông tin đầu vào từ mô-đun Mạng\nKết luận Bằng cách sử dụng lợi thế này, bạn có thể tự động tạo tài nguyên bằng cách sử dụng Terraform mà không cần tạo chúng theo cách thủ công trên AWS Management Console.\nTerraform sẽ xác định thứ tự các tài nguyên cần được tạo. Ban đầu, các tài nguyên trong phần Mạng sẽ được tạo trước tiên, tiếp theo là các tài nguyên trong phần Tính toán và cuối cùng là tài nguyên Cân bằng tải sẽ được thiết lập.\nSau đó, chúng ta có thể kiểm tra bằng cách sử dụng DNS của ALB để kiểm tra máy chủ web của mình. Chúng ta cần xuất DNS của ALB trong tệp outputs.tf.\noutput \u0026#34;alb_dns\u0026#34; {\rvalue = module.LoadBalancing.alb_dns\r} "
},
{
	"uri": "/vi/4.deployinfraandconfiguresns/",
	"title": "Triển khai cơ sở hạ tầng và cấu hình SNS",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, chúng ta sẽ tìm hiểu cách sử dụng Terraform để cung cấp cơ sở hạ tầng bằng Terraform CLI.\nBây giờ, hãy mở thư mục chứa mã nguồn Terraform bằng Visual Studio Code. Bạn cần mở terminal trong Visual Studio Code. Nhấp vào View và chọn Terminal. Sau khi mở terminal, bạn sẽ thấy rằng chúng ta đang ở trong thư mục Deploy-Infrastructure. Hãy điều hướng đến thư mục terraform bằng cách gõ lệnh sau trong terminal. Sau khi chạy lệnh, bạn đang ở trong thư mục terraform. cd .\\terraform\\ Hãy bắt đầu bằng cách khởi tạo không gian làm việc Terraform của bạn. Chạy lệnh sau trong terminal. terraform init Nếu chạy lệnh thành công, bạn sẽ thấy một số đầu ra trong terminal như hình bên dưới. Ngoài ra, một số thư mục và tập tin sẽ xuất hiện trong thư mục terraform. Terraform cũng tạo một tệp khóa có tên .terraform.lock.hcl chỉ định chính xác các phiên bản nhà cung cấp được sử dụng để bạn có thể kiểm soát thời điểm muốn cập nhật các nhà cung cấp được sử dụng cho dự án của mình. Initializing the backend...\rInitializing modules...\r- Compute in ..\\modules\\Compute\r- LoadBalancing in ..\\modules\\LoadBalancing\r- Networking in ..\\modules\\Networking\rInitializing provider plugins...\r- Finding hashicorp/aws versions matching \u0026#34;5.43.0\u0026#34;...\r- Finding latest version of hashicorp/http...\r- Installing hashicorp/aws v5.43.0...\r- Installed hashicorp/aws v5.43.0 (signed by HashiCorp)\r- Installing hashicorp/http v3.4.2...\r- Installed hashicorp/http v3.4.2 (signed by HashiCorp)\rTerraform has created a lock file .terraform.lock.hcl to record the provider\rselections it made above. Include this file in your version control repository\rso that Terraform can guarantee to make the same selections by default when\ryou run \u0026#34;terraform init\u0026#34; in the future.\rTerraform has been successfully initialized!\rYou may now begin working with Terraform. Try running \u0026#34;terraform plan\u0026#34; to see\rany changes that are required for your infrastructure. All Terraform commands\rshould now work.\rIf you ever set or change modules or backend configuration for Terraform,\rrerun this command to reinitialize your working directory. If you forget, other\rcommands will detect it and remind you to do so if necessary. Bây giờ, chúng ta cần xác thực cấu hình của mình. Sử dụng lệnh sau trong terminal để làm như vậy. terraform validate Bạn sẽ thấy kết quả như Success! The configuration is valid. trong thiết bị đầu cuối. Áp dụng cấu hình ngay bây giờ bằng lệnh terraform apply. Terraform sẽ in kết quả tương tự như những gì được hiển thị bên dưới. Sau khi chạy lệnh, bạn sẽ thấy kết quả đầu ra trong terminal như thế này. Cuối cùng, bạn sẽ thấy một câu hỏi như \u0026ldquo;Enter a Value\u0026rdquo;. Nhập yes để terraform có thể cung cấp cơ sở hạ tầng. Bạn sẽ thấy một dòng Apply complete! Resources: 16 added, 0 changed, 0 destroyed. Hãy nhớ sao chép giá trị của alb_dns trong terminal. Chúng ta sẽ đi xem từng tài nguyên mà terraform đã tạo.\nNội dung Tài nguyên mạng Tài nguyên điện toán Tài nguyên bộ cân bằng tải Cấu hình SNS và nhóm Auto Scaling "
},
{
	"uri": "/vi/5.conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bài thực hành này, bạn đã học cách sử dụng Terraform để cung cấp cơ sở hạ tầng có tính sẵn sàng cao trên AWS và định cấu hình SNS để gửi thông báo. Bạn cũng thấy rằng Elastic Load Balancing đảm bảo các máy ảo EC2 không tiếp xúc trực tiếp với internet vì chúng ta truy cập Nhóm Auto Scaling thông qua DNS của ALB.\nTài nguyên bổ sung Để có thêm các bài thực hành với Terraform, tôi muốn cung cấp một số tài liệu và kho lưu trữ có thể giúp bạn nâng cao kỹ năng Cơ sở hạ tầng dưới dạng Mã (IAC) của mình. Các kho lưu trữ này cũng có hướng dẫn và bản demo để giúp bạn hiểu về dự án.\nhttps://registry.terraform.io/providers/hashicorp/aws/latest/docs\nTriển khai web server với Terraform\nCung cấp hạ tầng cho workshop AWS FCJ nhiệm vụ 1\nNgoài ra, đây là mã nguồn Terraform đầy đủ của bài lab này.\n"
},
{
	"uri": "/vi/6.cleanupresources/",
	"title": "Xoá tài nguyên",
	"tags": [],
	"description": "",
	"content": "Amazon SNS Thực hiện theo các bước sau.\nTruy cập vào giao diện EC2, chọn Auto Scaling groups. Chọn our Auto Scaling groups. Nhấn vào Activity Trong giao diện Activity notifications, đánh vào ô vuông. tiến tới Actions, chọn Delete Nhấn vào Delete Bạn sẽ thấy một thông báo như dưới đây. Truy cập giao diện SNS. Nhấp vào Subscriptions. Chọn đăng ký và chọn Delete. Chọn Delete Bây giờ, hãy xóa Topics của chúng ta. Chọn Topics. Bấm vào vòng tròn. Chọn Delete Nhập delete me và chọn Delete Xóa tài nguyên bằng Terraform Thực hiện theo các bước sau.\nĐầu tiên, mở terminal trong Visual Studio Code. Nhập lệnh sau. terraform destroy Tùy chọn: Bạn có thể nhập terraform destroy -auto-approve để thực thi việc xoá tài nguyên. Có nghĩa là bạn không cần nhập yes. After you run the command, you will see the output like this. Nhập yes để đồng ý xoá tài nguyên. Lệnh terraform destroy là một cách thuận tiện để xoá tất cả các đối tượng từ xa được quản lý bởi một cấu hình Terraform cụ thể. Bạn có thể thấy Terraform sẽ xóa tài nguyên cho chúng ta. Chúng ta không cần vào Bảng điều khiển quản lý AWS và xóa từng tài nguyên.\nVới Terraform, bạn có thể thấy rõ một số lợi ích, bao gồm:\nTự động hóa: Terraform tự động hóa quá trình cung cấp và quản lý cơ sở hạ tầng, giảm nguy cơ lỗi của con người và tăng hiệu quả.\nHiệu quả: Terraform giảm thời gian và công sức cần thiết để quản lý cơ sở hạ tầng, cho phép bạn tập trung vào các nhiệm vụ cấp cao hơn và tăng hiệu quả tổng thể.\nHiệu quả về chi phí: Terraform giúp giảm chi phí bằng cách cho phép bạn quản lý tài nguyên cơ sở hạ tầng hiệu quả hơn, giảm lãng phí và tối ưu hóa việc sử dụng tài nguyên.\nBạn có thể xem một số tài nguyên mà Terraform đã xoá bằng cách sử dụng CloudTrail.\nTruy cập giao diện CloudTrail.\nNhấp vào Event history. Tại đây, bạn có thể thấy trong giao diện Event history. Tùy chọn: Bạn có thể xóa access key và key pair được sử dụng trong phòng thí nghiệm này. "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]